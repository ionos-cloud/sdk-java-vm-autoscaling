/*
 * VM Auto Scaling API
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * The version of the OpenAPI document: 1-SDK.1
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.vmautoscaling.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of termination policy for the VM Auto Scaling Group to follow a specific pattern for scaling-in replicas. The default termination policy is &#39;OLDEST_SERVER_FIRST&#39;.
 */
@JsonAdapter(TerminationPolicyType.Adapter.class)
public enum TerminationPolicyType {
  
  OLDEST_SERVER_FIRST("OLDEST_SERVER_FIRST"),
  
  NEWEST_SERVER_FIRST("NEWEST_SERVER_FIRST"),
  
  RANDOM("RANDOM");

  private String value;

  TerminationPolicyType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TerminationPolicyType fromValue(String value) {
    for (TerminationPolicyType b : TerminationPolicyType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<TerminationPolicyType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TerminationPolicyType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TerminationPolicyType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TerminationPolicyType.fromValue(value);
    }
  }
}

