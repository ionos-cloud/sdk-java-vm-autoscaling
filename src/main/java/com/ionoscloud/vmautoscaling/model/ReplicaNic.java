/*
 * VM Auto Scaling API
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * The version of the OpenAPI document: 1-SDK.1
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.vmautoscaling.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ionoscloud.vmautoscaling.model.NicFirewallRule;
import com.ionoscloud.vmautoscaling.model.NicFlowLog;
import com.ionoscloud.vmautoscaling.model.TargetGroup;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * ReplicaNic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-25T09:34:22.361740Z[Etc/UTC]")

public class ReplicaNic {
  
  public static final String SERIALIZED_NAME_LAN = "lan";
  @SerializedName(SERIALIZED_NAME_LAN)
  private Integer lan;


  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;


  public static final String SERIALIZED_NAME_DHCP = "dhcp";
  @SerializedName(SERIALIZED_NAME_DHCP)
  private Boolean dhcp;


  public static final String SERIALIZED_NAME_FIREWALL_ACTIVE = "firewallActive";
  @SerializedName(SERIALIZED_NAME_FIREWALL_ACTIVE)
  private Boolean firewallActive;


  /**
   * The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
   */
  @JsonAdapter(FirewallTypeEnum.Adapter.class)
  public enum FirewallTypeEnum {
    INGRESS("INGRESS"),
    
    EGRESS("EGRESS"),
    
    BIDIRECTIONAL("BIDIRECTIONAL");

    private String value;

    FirewallTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirewallTypeEnum fromValue(String value) {

      for (FirewallTypeEnum b : FirewallTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FirewallTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirewallTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirewallTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FirewallTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FIREWALL_TYPE = "firewallType";
  @SerializedName(SERIALIZED_NAME_FIREWALL_TYPE)
  private FirewallTypeEnum firewallType;


  public static final String SERIALIZED_NAME_FLOW_LOGS = "flowLogs";
  @SerializedName(SERIALIZED_NAME_FLOW_LOGS)
  private List<NicFlowLog> flowLogs = null;


  public static final String SERIALIZED_NAME_FIREWALL_RULES = "firewallRules";
  @SerializedName(SERIALIZED_NAME_FIREWALL_RULES)
  private List<NicFirewallRule> firewallRules = null;


  public static final String SERIALIZED_NAME_TARGET_GROUP = "targetGroup";
  @SerializedName(SERIALIZED_NAME_TARGET_GROUP)
  private TargetGroup targetGroup;

  

  public ReplicaNic lan(Integer lan) {
    
    this.lan = lan;
    return this;
  }

   /**
   * The LAN ID of this replica NIC.
   * minimum: 1
   * @return lan
  **/
  @ApiModelProperty(example = "1", required = true, value = "The LAN ID of this replica NIC.")

  public Integer getLan() {
    return lan;
  }


  public void setLan(Integer lan) {
    this.lan = lan;
  }



  public ReplicaNic name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The replica NIC name.
   * @return name
  **/
  @ApiModelProperty(example = "LAN NIC 1", required = true, value = "The replica NIC name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }



  public ReplicaNic dhcp(Boolean dhcp) {
    
    this.dhcp = dhcp;
    return this;
  }

   /**
   * DHCP for this replica NIC. This is an optional attribute with the default value &#39;TRUE&#39; if not specified in the request payload or as null.
   * @return dhcp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "DHCP for this replica NIC. This is an optional attribute with the default value 'TRUE' if not specified in the request payload or as null.")

  public Boolean getDhcp() {
    return dhcp;
  }


  public void setDhcp(Boolean dhcp) {
    this.dhcp = dhcp;
  }



  public ReplicaNic firewallActive(Boolean firewallActive) {
    
    this.firewallActive = firewallActive;
    return this;
  }

   /**
   * Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.
   * @return firewallActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.")

  public Boolean getFirewallActive() {
    return firewallActive;
  }


  public void setFirewallActive(Boolean firewallActive) {
    this.firewallActive = firewallActive;
  }



  public ReplicaNic firewallType(FirewallTypeEnum firewallType) {
    
    this.firewallType = firewallType;
    return this;
  }

   /**
   * The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
   * @return firewallType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INGRESS", value = "The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.")

  public FirewallTypeEnum getFirewallType() {
    return firewallType;
  }


  public void setFirewallType(FirewallTypeEnum firewallType) {
    this.firewallType = firewallType;
  }



  public ReplicaNic flowLogs(List<NicFlowLog> flowLogs) {
    
    this.flowLogs = flowLogs;
    return this;
  }

  public ReplicaNic addFlowLogsItem(NicFlowLog flowLogsItem) {
    if (this.flowLogs == null) {
      this.flowLogs = new ArrayList<NicFlowLog>();
    }
    this.flowLogs.add(flowLogsItem);
    return this;
  }

   /**
   * List of all flow logs for the specified NIC.
   * @return flowLogs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all flow logs for the specified NIC.")

  public List<NicFlowLog> getFlowLogs() {
    return flowLogs;
  }


  public void setFlowLogs(List<NicFlowLog> flowLogs) {
    this.flowLogs = flowLogs;
  }



  public ReplicaNic firewallRules(List<NicFirewallRule> firewallRules) {
    
    this.firewallRules = firewallRules;
    return this;
  }

  public ReplicaNic addFirewallRulesItem(NicFirewallRule firewallRulesItem) {
    if (this.firewallRules == null) {
      this.firewallRules = new ArrayList<NicFirewallRule>();
    }
    this.firewallRules.add(firewallRulesItem);
    return this;
  }

   /**
   * List of all firewall rules for the specified NIC.
   * @return firewallRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all firewall rules for the specified NIC.")

  public List<NicFirewallRule> getFirewallRules() {
    return firewallRules;
  }


  public void setFirewallRules(List<NicFirewallRule> firewallRules) {
    this.firewallRules = firewallRules;
  }



  public ReplicaNic targetGroup(TargetGroup targetGroup) {
    
    this.targetGroup = targetGroup;
    return this;
  }

   /**
   * Get targetGroup
   * @return targetGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TargetGroup getTargetGroup() {
    return targetGroup;
  }


  public void setTargetGroup(TargetGroup targetGroup) {
    this.targetGroup = targetGroup;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicaNic replicaNic = (ReplicaNic) o;
    return Objects.equals(this.lan, replicaNic.lan) && Objects.equals(this.name, replicaNic.name) && Objects.equals(this.dhcp, replicaNic.dhcp) && Objects.equals(this.firewallActive, replicaNic.firewallActive) && Objects.equals(this.firewallType, replicaNic.firewallType) && Objects.equals(this.flowLogs, replicaNic.flowLogs) && Objects.equals(this.firewallRules, replicaNic.firewallRules) && Objects.equals(this.targetGroup, replicaNic.targetGroup);
  }




  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicaNic {\n");
    
    sb.append("    lan: ").append(toIndentedString(lan)).append("\n");

    sb.append("    name: ").append(toIndentedString(name)).append("\n");

    sb.append("    dhcp: ").append(toIndentedString(dhcp)).append("\n");

    sb.append("    firewallActive: ").append(toIndentedString(firewallActive)).append("\n");

    sb.append("    firewallType: ").append(toIndentedString(firewallType)).append("\n");

    sb.append("    flowLogs: ").append(toIndentedString(flowLogs)).append("\n");

    sb.append("    firewallRules: ").append(toIndentedString(firewallRules)).append("\n");

    sb.append("    targetGroup: ").append(toIndentedString(targetGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

